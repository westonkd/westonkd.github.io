{"version":3,"sources":["Cell.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","rows","columns","index","useState","rowSpan","setRowSpan","colSpan","setColSpan","className","style","gridRow","gridColumn","display","flexDirection","height","data-container-id","data-row","Math","floor","data-col","flexGrow","onClick","old","textAlign","App","setRows","setColumns","cellCount","setCellCount","useEffect","tinymce","editors","forEach","editor","remove","init","inline","selector","plugins","borderBottom","padding","marginBottom","type","min","value","onChange","e","currentTarget","marginLeft","gridTemplateRows","gridTemplateColumns","Array","from","keys","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAqDeA,EAnDF,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAAY,EACXC,mBAAS,GADE,mBAClCC,EADkC,KACzBC,EADyB,OAEXF,mBAAS,GAFE,mBAElCG,EAFkC,KAEzBC,EAFyB,KAIzC,OACE,qBACEC,UAAU,eACVC,MAAO,CACLC,QAAQ,eAAD,OAAiBN,GACxBO,WAAW,eAAD,OAAiBL,IAJ/B,SAOE,sBAAKG,MAAO,CAAEG,QAAS,OAAQC,cAAe,UAA9C,UACE,sBAAKJ,MAAO,CAAEG,QAAS,OAAQE,OAAQ,QAAvC,UAEE,qBACEN,UAAU,OACVO,oBAAmBb,EACnBc,WAAUC,KAAKC,MAAMhB,EAAQF,GAAQ,EACrCmB,WAAWjB,EAAQD,EAAW,EAC9BQ,MAAO,CAAEW,SAAU,GALrB,0BAWA,gCACE,8BACE,wBAAQC,QAAS,kBAAMd,GAAW,SAACe,GAAD,OAASA,EAAM,MAAjD,iBAEF,8BACE,wBACED,QAAS,WACPd,GAAW,SAACe,GAAD,OAAUA,EAAM,EAAIA,EAAM,EAAI,MAF7C,uBAWN,sBAAKb,MAAO,CAACc,UAAW,UAAxB,UACI,wBAAQF,QAAS,kBAAMhB,GAAW,SAACiB,GAAD,OAASA,EAAM,MAAjD,eACA,gDCgCGE,MAxEf,WAAgB,IAAD,EACWrB,mBAAS,GADpB,mBACNH,EADM,KACAyB,EADA,OAEiBtB,mBAAS,GAF1B,mBAENF,EAFM,KAEGyB,EAFH,OAGqBvB,mBAAS,GAH9B,mBAGNwB,EAHM,KAGKC,EAHL,KAeb,OAVAC,qBAAU,WACRC,IAAQC,QAAQC,SAAQ,SAACC,GAAD,OAAYA,EAAOC,YAE3CJ,IAAQK,KAAK,CACXC,QAAQ,EACRC,SAAU,QACVC,QAAS,kBAEV,CAACX,IAGF,qCACE,sBACElB,MAAO,CACL8B,aAAc,iBACdC,QAAS,OACTC,aAAc,QAJlB,UAOE,yCAEE,uBACEC,KAAK,SACLC,IAAI,IACJC,MAAO5C,EACP6C,SAAU,SAACC,GAAD,OAAOrB,EAAQqB,EAAEC,cAAcH,aAG7C,qBAAKnC,MAAO,CAAEuC,WAAY,OAAQpC,QAAS,UAA3C,SACE,4CAEE,uBACE8B,KAAK,SACLC,IAAI,IACJC,MAAO3C,EACP4C,SAAU,SAACC,GAAD,OAAOpB,EAAWoB,EAAEC,cAAcH,kBAMpD,sBACEpC,UAAU,MACVC,MAAO,CACLwC,iBAAiB,UAAD,OAAYjD,EAAZ,WAChBkD,oBAAoB,UAAD,OAAYjD,EAAZ,YAJvB,UAOGkD,MAAMC,KAAKD,MAAMxB,GAAW0B,QAAQC,KAAI,SAACpD,GACxC,OACE,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,MAAOA,GAHT,cAIcA,OAIlB,qBAAKM,UAAU,UAAUa,QAAS,kBAAMO,GAAa,SAACN,GAAD,OAASA,EAAM,MAApE,2BAIF,kDC7DSiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8b62f280.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst Cell = ({ rows, columns, index }) => {\n  const [rowSpan, setRowSpan] = useState(1);\n  const [colSpan, setColSpan] = useState(1);\n\n  return (\n    <div\n      className=\"cell-wrapper\"\n      style={{\n        gridRow: `auto / span ${rowSpan}`,\n        gridColumn: `auto / span ${colSpan}`,\n      }}\n    >\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <div style={{ display: \"flex\", height: '100%' }}>\n          {/* Cell */}\n          <div\n            className=\"cell\"\n            data-container-id={index}\n            data-row={Math.floor(index / rows) + 1}\n            data-col={(index % columns) + 1}\n            style={{ flexGrow: 1 }}\n          >\n            Content here\n          </div>\n\n          {/* Col Controls */}\n          <div>\n            <div>\n              <button onClick={() => setColSpan((old) => old + 1)}>+</button>\n            </div>\n            <div>\n              <button\n                onClick={() => {\n                  setColSpan((old) => (old > 0 ? old - 1 : 0));\n                }}\n              >\n                -\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div style={{textAlign: 'center'}}>\n            <button onClick={() => setRowSpan((old) => old + 1)}>+</button>\n            <button>-</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Cell;\n","import \"./App.css\";\nimport tinymce from \"tinymce\";\nimport { useEffect, useState } from \"react\";\n\nimport Cell from \"./Cell\";\n\nfunction App() {\n  const [rows, setRows] = useState(1);\n  const [columns, setColumns] = useState(1);\n  const [cellCount, setCellCount] = useState(1);\n\n  useEffect(() => {\n    tinymce.editors.forEach((editor) => editor.remove())\n\n    tinymce.init({\n      inline: true,\n      selector: \".cell\",\n      plugins: \"noneditable\",\n    });\n  }, [cellCount]);\n\n  return (\n    <>\n      <div\n        style={{\n          borderBottom: \"solid 2px gray\",\n          padding: \"10px\",\n          marginBottom: \"10px\",\n        }}\n      >\n        <label>\n          Rows\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={rows}\n            onChange={(e) => setRows(e.currentTarget.value)}\n          />\n        </label>\n        <div style={{ marginLeft: \"10px\", display: \"inline\" }}>\n          <label>\n            Columns\n            <input\n              type=\"number\"\n              min=\"1\"\n              value={columns}\n              onChange={(e) => setColumns(e.currentTarget.value)}\n            />\n          </label>\n        </div>\n      </div>\n\n      <div\n        className=\"App\"\n        style={{\n          gridTemplateRows: `repeat(${rows}, auto)`,\n          gridTemplateColumns: `repeat(${columns}, auto)`,\n        }}\n      >\n        {Array.from(Array(cellCount).keys()).map((index) => {\n          return (\n            <Cell\n              rows={rows}\n              columns={columns}\n              index={index}\n              key={`CEL-${index}`}\n            />\n          );\n        })}\n        <div className=\"addCell\" onClick={() => setCellCount((old) => old + 1)}>\n          + Add Cell\n        </div>\n      </div>\n      <div>End Content</div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}